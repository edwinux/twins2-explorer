#!/bin/bash

# TWINS Deploy Control Script
# Easy management interface for the TWINS auto-deployment system

set -euo pipefail

# Colors
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[1;33m"
BLUE="\033[0;34m"
PURPLE="\033[0;35m"
NC="\033[0m"

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

show_header() {
    echo -e "${BLUE}"
    echo "=================================================="
    echo "üöÄ TWINS Auto-Deploy Control Panel"
    echo "=================================================="
    echo -e "${NC}"
}

show_status() {
    echo -e "${YELLOW}üìä System Status:${NC}"
    echo ""
    
    # Service status
    echo -e "üìã ${BLUE}Service Status:${NC}"
    if systemctl is-active twins-deploy >/dev/null 2>&1; then
        echo -e "  ‚úÖ twins-deploy: ${GREEN}RUNNING${NC}"
    else
        echo -e "  ‚ùå twins-deploy: ${RED}STOPPED${NC}"
    fi
    
    if systemctl is-active twins-frontend >/dev/null 2>&1; then
        echo -e "  ‚úÖ twins-frontend: ${GREEN}RUNNING${NC}"
    else
        echo -e "  ‚ùå twins-frontend: ${RED}STOPPED${NC}"
    fi
    
    if systemctl is-active twins-node >/dev/null 2>&1; then
        echo -e "  ‚úÖ twins-node: ${GREEN}RUNNING${NC}"
    else
        echo -e "  ‚ùå twins-node: ${RED}STOPPED${NC}"
    fi
    
    echo ""
    
    # Repository status
    echo -e "üì¶ ${BLUE}Repository Status:${NC}"
    cd /opt/twins2-explorer
    local current_hash=$(git rev-parse --short HEAD)
    local current_branch=$(git branch --show-current)
    echo -e "  Branch: ${GREEN}$current_branch${NC}"
    echo -e "  Commit: ${GREEN}$current_hash${NC}"
    echo -e "  Message: $(git log -1 --pretty=format:"%s")"
    
    # Check if updates available
    git fetch origin main >/dev/null 2>&1
    local remote_hash=$(git rev-parse --short origin/main)
    if [ "$current_hash" != "$remote_hash" ]; then
        echo -e "  ${YELLOW}üì• Updates available! Remote: $remote_hash${NC}"
    else
        echo -e "  ${GREEN}‚úÖ Up to date${NC}"
    fi
    
    echo ""
    
    # Recent deployments
    echo -e "üìã ${BLUE}Recent Activity:${NC}"
    if [ -f /var/log/twins-deploy.log ]; then
        tail -5 /var/log/twins-deploy.log | while read line; do
            echo "  $line"
        done
    else
        echo "  No logs available"
    fi
}

show_logs() {
    local lines="${1:-50}"
    echo -e "${YELLOW}üìú Recent Logs (last $lines lines):${NC}"
    echo ""
    
    if [ -f /var/log/twins-deploy.log ]; then
        tail -"$lines" /var/log/twins-deploy.log
    else
        echo "No logs available"
    fi
}

force_deploy() {
    echo -e "${YELLOW}üöÄ Force deploying latest changes...${NC}"
    echo ""
    
    if "$SCRIPT_DIR/deploy.sh" force-deploy; then
        echo -e "${GREEN}‚úÖ Deployment completed successfully${NC}"
    else
        echo -e "${RED}‚ùå Deployment failed${NC}"
        return 1
    fi
}

rollback_deploy() {
    echo -e "${YELLOW}‚è™ Rolling back last deployment...${NC}"
    echo ""
    
    read -p "Are you sure you want to rollback? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if "$SCRIPT_DIR/deploy.sh" rollback; then
            echo -e "${GREEN}‚úÖ Rollback completed successfully${NC}"
        else
            echo -e "${RED}‚ùå Rollback failed${NC}"
            return 1
        fi
    else
        echo "Rollback cancelled"
    fi
}

show_backups() {
    echo -e "${YELLOW}üíæ Available Backups:${NC}"
    echo ""
    
    local backup_dir="/opt/twins-deploy/backups"
    if [ -d "$backup_dir" ]; then
        ls -la "$backup_dir" | grep "^d" | awk '{print $9,$6,$7,$8}' | grep -v '^\.\.\? ' | while read backup date1 date2 time; do
            if [ -n "$backup" ]; then
                echo -e "  üì¶ ${GREEN}$backup${NC} - $date1 $date2 $time"
            fi
        done
    else
        echo "  No backups available"
    fi
}

show_help() {
    show_header
    echo -e "${YELLOW}Available Commands:${NC}"
    echo ""
    echo -e "  ${GREEN}status${NC}           Show system status and information"
    echo -e "  ${GREEN}logs [lines]${NC}     Show deployment logs (default: 50 lines)"
    echo -e "  ${GREEN}deploy${NC}           Force deploy latest changes"
    echo -e "  ${GREEN}rollback${NC}         Rollback to previous deployment"
    echo -e "  ${GREEN}backups${NC}          List available backups"
    echo -e "  ${GREEN}start${NC}            Start the deployment monitor"
    echo -e "  ${GREEN}stop${NC}             Stop the deployment monitor"
    echo -e "  ${GREEN}restart${NC}          Restart the deployment monitor"
    echo -e "  ${GREEN}enable${NC}           Enable auto-start on boot"
    echo -e "  ${GREEN}disable${NC}          Disable auto-start on boot"
    echo ""
    echo -e "${BLUE}Examples:${NC}"
    echo -e "  $0 status"
    echo -e "  $0 logs 100"
    echo -e "  $0 deploy"
    echo ""
}

# Main command handling
case "${1:-help}" in
    "status"|"st")
        show_header
        show_status
        ;;
    "logs"|"log")
        show_logs "${2:-50}"
        ;;
    "deploy"|"force-deploy")
        show_header
        force_deploy
        ;;
    "rollback"|"rb")
        show_header
        rollback_deploy
        ;;
    "backups"|"backup")
        show_backups
        ;;
    "start")
        echo -e "${YELLOW}Starting deployment monitor...${NC}"
        systemctl start twins-deploy
        echo -e "${GREEN}‚úÖ Service started${NC}"
        ;;
    "stop")
        echo -e "${YELLOW}Stopping deployment monitor...${NC}"
        systemctl stop twins-deploy
        echo -e "${GREEN}‚úÖ Service stopped${NC}"
        ;;
    "restart")
        echo -e "${YELLOW}Restarting deployment monitor...${NC}"
        systemctl restart twins-deploy
        echo -e "${GREEN}‚úÖ Service restarted${NC}"
        ;;
    "enable")
        echo -e "${YELLOW}Enabling auto-start on boot...${NC}"
        systemctl enable twins-deploy
        echo -e "${GREEN}‚úÖ Auto-start enabled${NC}"
        ;;
    "disable")
        echo -e "${YELLOW}Disabling auto-start on boot...${NC}"
        systemctl disable twins-deploy
        echo -e "${RED}‚ö†Ô∏è  Auto-start disabled${NC}"
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        echo -e "${RED}Unknown command: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac
